{"version":3,"sources":["components/MemoryBlock.js","App.js","serviceWorker.js","index.js","images/bg.png"],"names":["memoryCard","react_default","a","createElement","class","role","aria-label","style","fontSize","this","props","emoji","React","Component","App","emojiList","state","CurrentDisplay","clickedList","currentScore","bestScore","lastGuess","randomEmoji","newDisplay","i","_this","Math","floor","random","length","setState","num","console","log","correct","newClicked","newScore","push","_this2","backgroundImage","concat","bg","height","boxShadow","className","backgroundColor","color","margin","paddingBottom","width","marginTop","cursor","onClick","compareClicked","MemoryBlock","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7289165c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass memoryCard extends React.Component{\r\n    render(){\r\n        return (\r\n            <div class=\"card-body text-center\">\r\n                <span role=\"img\" aria-label=\"emoji\" style={{ fontSize: \"64px\" }}>{this.props.emoji}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default memoryCard;","import React from 'react';\nimport bg from './images/bg.png';\nimport Memcard from './components/MemoryBlock';\n\nclass App extends React.Component{\n\n  emojiList = ['üòÄ', 'üòÅ', 'üòÇ', 'üòò', 'üôÑ', 'üòã', 'üòê', 'üòë', 'üò∂', 'üòï', 'üôÉ', 'üò≠', 'üò†', 'ü§¢', 'üò¨', 'ü§°', 'ü•¥', 'üòå'];\n\n  state = {\n    CurrentDisplay: [],\n    clickedList : [],\n    currentScore : 0,\n    bestScore : 0,\n    lastGuess : \"Click an Emoji to start!\"\n  }\n\n  componentWillMount() {\n    this.randomEmoji();\n  }\n\n  compareClicked(num) {\n    console.log(this.state.CurrentDisplay[num]);\n    var correct = true;\n    for (let i = 0; i < this.state.clickedList.length; i++) {\n      const element = this.state.clickedList[i];\n      if (element === this.state.CurrentDisplay[num]) {\n        correct = false;\n      }  \n    }\n\n    if (correct) {\n      var newClicked = this.state.clickedList;\n      var newScore = this.state.currentScore + 1;\n      newClicked.push(this.state.CurrentDisplay[num]);\n\n      if (this.state.bestScore < newScore) {\n        this.setState({\n          currentScore: newScore,\n          clickedList: newClicked,\n          bestScore: newScore,\n          lastGuess: \"Correct!\"\n        })\n      }\n      else {\n        this.setState({\n          currentScore: newScore,\n          clickedList: newClicked,\n          lastGuess: \"Correct!\"\n        })\n      }\n    }\n    else {\n      this.setState({\n        currentScore : 0,\n        clickedList : [],\n        lastGuess: \"Incorrect!\"\n      })\n    }\n    this.randomEmoji();\n  }\n\n  randomEmoji = () => {\n    var newDisplay = [];\n    for (let i = 0; i < 12; i++) {\n      newDisplay[i] = this.emojiList[Math.floor(Math.random() * this.emojiList.length)]\n    }\n    this.setState({\n      CurrentDisplay: newDisplay\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{ backgroundImage: `url(${bg})`, height: \"418px\", boxShadow: \"0 6px 12px rgba(0,0,0,.24), 0 6px 12px rgba(0,0,0,.4)\" }}>\n          <nav className=\"navbar row sticky-top\" style={{ backgroundColor: \"rgba(81, 51, 164, 1)\", color: \"white\" }}>\n            <span className=\"navbar-brand mb-0 h1 col-sm\"><h3>Clicky Game!</h3></span>\n            <span className=\"col-sm d-flex justify-content-center\">\n              <h1>{this.state.lastGuess}</h1>\n            </span>\n            <span className=\"col-sm d-flex justify-content-end\">\n              <h3>Score: {this.state.currentScore} | Top Score: {this.state.bestScore}</h3>\n            </span>\n          </nav>\n          <div className=\"header\" style={{ margin: \"100px\", color: \"white\" }}>\n            <h1 className=\"mt-6 d-flex justify-content-center\">Clicky Game!</h1>\n            <h5 className=\"mt-4 d-flex justify-content-center\" style={{ paddingBottom: \"150px\" }}>Click on an image to earn points, but don't click on any more than once!</h5>\n          </div>\n        </div>\n        <div className=\"container\" style={{ width: \"50%\" }}>\n          <div class=\"card-deck\" style={{ marginTop: \"30px\" }}>\n            <div className=\"card\" style={{ boxShadow: \"0 6px 12px rgba(0,0,0,.24), 0 6px 12px rgba(0,0,0,.4)\", cursor: \"pointer\" }} onClick={() => this.compareClicked(0)}>\n              <Memcard emoji={this.state.CurrentDisplay[0]}></Memcard>\n            </div>\n            <div className=\"card\" style={{ boxShadow: \"0 6px 12px rgba(0,0,0,.24), 0 6px 12px rgba(0,0,0,.4)\", cursor: \"pointer\" }} onClick={() => this.compareClicked(1)}>\n              <Memcard emoji={this.state.CurrentDisplay[1]}></Memcard>\n            </div>\n            <div className=\"card\" style={{ boxShadow: \"0 6px 12px rgba(0,0,0,.24), 0 6px 12px rgba(0,0,0,.4)\", cursor: \"pointer\" }} onClick={() => this.compareClicked(2)}>\n              <Memcard emoji={this.state.CurrentDisplay[2]}></Memcard>\n            </div>\n            <div className=\"card\" style={{ boxShadow: \"0 6px 12px rgba(0,0,0,.24), 0 6px 12px rgba(0,0,0,.4)\", cursor: \"pointer\" }} onClick={() => this.compareClicked(3)}>\n              <Memcard emoji={this.state.CurrentDisplay[3]}></Memcard>\n            </div>\n          </div>\n          <div class=\"card-deck\" style={{ marginTop: \"30px\" }}>\n            <div className=\"card\" style={{ boxShadow: \"0 6px 12px rgba(0,0,0,.24), 0 6px 12px rgba(0,0,0,.4)\", cursor: \"pointer\" }} onClick={() => this.compareClicked(4)}>\n              <Memcard emoji={this.state.CurrentDisplay[4]}></Memcard>\n            </div>\n            <div className=\"card\" style={{ boxShadow: \"0 6px 12px rgba(0,0,0,.24), 0 6px 12px rgba(0,0,0,.4)\", cursor: \"pointer\" }} onClick={() => this.compareClicked(5)}>\n              <Memcard emoji={this.state.CurrentDisplay[5]}></Memcard>\n            </div>\n            <div className=\"card\" style={{ boxShadow: \"0 6px 12px rgba(0,0,0,.24), 0 6px 12px rgba(0,0,0,.4)\", cursor: \"pointer\" }} onClick={() => this.compareClicked(6)}>\n              <Memcard emoji={this.state.CurrentDisplay[6]}></Memcard>\n            </div>\n            <div className=\"card\" style={{ boxShadow: \"0 6px 12px rgba(0,0,0,.24), 0 6px 12px rgba(0,0,0,.4)\", cursor: \"pointer\" }} onClick={() => this.compareClicked(7)}>\n              <Memcard emoji={this.state.CurrentDisplay[7]}></Memcard>\n            </div>\n          </div>\n          <div class=\"card-deck\" style={{ marginTop: \"30px\" }}>\n            <div className=\"card\" style={{ boxShadow: \"0 6px 12px rgba(0,0,0,.24), 0 6px 12px rgba(0,0,0,.4)\", cursor: \"pointer\" }} onClick={() => this.compareClicked(8)}>\n              <Memcard emoji={this.state.CurrentDisplay[8]}></Memcard>\n            </div>\n            <div className=\"card\" style={{ boxShadow: \"0 6px 12px rgba(0,0,0,.24), 0 6px 12px rgba(0,0,0,.4)\", cursor: \"pointer\" }} onClick={() => this.compareClicked(9)}>\n              <Memcard emoji={this.state.CurrentDisplay[9]}></Memcard>\n            </div>\n            <div className=\"card\" style={{ boxShadow: \"0 6px 12px rgba(0,0,0,.24), 0 6px 12px rgba(0,0,0,.4)\", cursor: \"pointer\" }} onClick={() => this.compareClicked(10)}>\n              <Memcard emoji={this.state.CurrentDisplay[10]}></Memcard>\n            </div>\n            <div className=\"card\" style={{ boxShadow: \"0 6px 12px rgba(0,0,0,.24), 0 6px 12px rgba(0,0,0,.4)\", cursor: \"pointer\" }} onClick={() => this.compareClicked(11)}>\n              <Memcard emoji={this.state.CurrentDisplay[11]}></Memcard>\n            </div>\n          </div>\n        </div>\n        <footer className=\"footer\" style={{ marginTop: \"30px\", backgroundColor: \"rgba(81, 51, 164, 0.95)\", color: \"white\", height: \"40px\" }}>\n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.726c02ab.png\";"],"sourceRoot":""}